import igraph as ig
from datetime import datetime
import time
import simplicialHomology as sh

def closure(complx):
    ## returns the closure of the given complex - adds all of the sublists
    n = max([len(lst) for lst in complx])
    k = n-1
    A1 = []
    while k >= 0:
        A1 += sh.ksimplices(complx,k)
        k += -1
    return A1

def sstar(toplexes, complx):
    ## computes the star of the complex in the ASC generated by the toplexes
    i = 0
    asc = closure(toplexes)

    A = list(complx)
    i += 1
    for simplex in complx:
        B = sh.star(asc,simplex)
        i+= 1
        for b in B:
            if not sh.simpcluded(b,A):
                A.append(b)
    return A

###### ToDo: make a neighborhood function which computes does the recursion to construct
######       the correct complx for locHomTable

def locHomTable(toplexes,graph,ascdict={},neighborhood = 1,outfile = None):
#  Computes the local homology for all faces in the ASC generated by the toplexes
#  and returns a table of the dimensions of H1, H2, and H3
#  Takes a neighborhood size 0,1,2, and an output file name
#  if nodes are named, this can go in ascdict={nodeNumber:"name"} for the table
#  otherwise names will be given by the concatenation of the index numbers

    k = 1
    ASC = closure(toplexes)

    sh.printAS(toplexes,"Flag complex from SH")
    sh.printAS(ASC,"ASC")
    
    
    ofile = open(outfile, 'w')
    ofile.write("Local Homology (neighborhood=%d) of flag complex generated by %s\n" % (neighborhood, graph))
    
    if outfile == None:
        print " ", "\t\t", "H1" , "\t" , "H2", "\t", "H3", "\t\t", "FACE"
        print "-"*50
    else:
        ofile.write(" \t\t" + "H1" + "\t" + "H2" + "\t" + "H3" + "\t\t" + "name" + "\n")

    for splx in ASC:

        if neighborhood == 0:
            complx = [splx]
        elif neighborhood == 1:
            complx = closure([splx])
        else:
            complx = closure(sstar(toplexes, closure([splx])))
        A = sstar(toplexes, complx)

        H1=sh.localHomology(toplexes,1,A).shape[1]
        H2=sh.localHomology(toplexes,2,A).shape[1]
        H3=sh.localHomology(toplexes,3,A).shape[1]


        name = ""
        if ascdict != {}:
            for idx in range(len(A[0])):
                name += ascdict[A[0][idx]]

        if name == "":
            name = ','.join(map(str,splx))

        if outfile == None:
            print  k, "\t\t", H1 , "\t" , H2, "\t", H3, "\t\t", name
            k += 1
        else:
            ofile.write(str(k) + "\t\t" + str(H1) + "\t" + str(H2) + "\t" + str(H3) + "\t\t" + str(name) + "\n")
            k += 1

    ofile.close()

############## 7x6 Example  ###############################################
#toplexes = [[0,1],[0,2],[1,2,3],[2,3,4,5],[5,6]]
##flagtoplexes = [[0,1,2],[1,2,3],[2,3,4,5],[5,6]]
#ascdict = {0:"E", 1:"C", 2:"A", 3:"K", 4:"V", 5:"T2", 6:"T1"}
#print("Local Homology of flag complex generated by original 7 by 6 diagram")
#locHomTable(sh.flag(toplexes),"7x6",ascdict,1,"LH.txt")

############################################################################

############## 7x6 Example AS version ######################################
edgeList76 = [[0,1],[0,2],[1,2],[1,3],[2,3],[2,4],[2,5],[3,4],[3,5],[4,5],[5,6]]
ascdict = {0:"E", 1:"C", 2:"A", 3:"K", 4:"V", 5:"T2", 6:"T1"}
gflag = sh.flag(edgeList76,4)
locHomTable(gflag,"7x6",ascdict,1,"LHAS.txt")